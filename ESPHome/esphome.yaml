substitutions:
  name: sonoff-nspanel1-zolder
  friendly_name: "NSPanel zolder"
  location: Zolder

esphome:
  name: $name
  comment: touchscreen zolder

esp32:
  board: esp32dev

wifi:
  ssid: !secret esp_wifi_ssid
  password: !secret esp_wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name}"
    password: !secret esp_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
 services:
    # Service to play a song
  - service: play_rtttl
    variables:
      song_str: string
    then:
      - rtttl.play:
          rtttl: !lambda 'return song_str;'
  # Service to upload a new screen file (TFT)
  - service: upload_tft
    then:
      - lambda: 'id(disp1)->upload_tft();'
  - service: send_command
    variables:
      cmd: string
    then:
      - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'
  # Service to control the visible page from Home Assistant
  - service: set_page
    variables:
      page: int
    then:
      - lambda: 'id(disp1).send_command_printf("page %i", page);'
  # Service to show a notification on the screen for 20 s. Tap or wait to close
  - service: notification
    variables:
      header: string
      message: string
    then:
      - lambda: |-
          id(disp1).set_component_text_printf("notification.head", "%s", header.c_str());
          id(disp1).set_component_text_printf("notification.body", "%s", message.c_str());
          id(disp1).send_command_printf("page 9");
      - rtttl.play: "twobits:d=16,o=5,b=180:c,e,g,c6,8p,c,16p,e,c"
      - delay: 20s
      - lambda: id(disp1).send_command_printf("page 0");

ota:

# Enable Web server.
web_server:
  port: 80

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: id(disp1).set_component_text_printf("dashboard.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          - lambda: id(disp1).set_component_text_printf("dashboard.date", "%i-%02i-%02i", id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);
    on_time_sync:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("dashboard.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          - lambda: id(disp1).set_component_text_printf("dashboard.date", "%i-%02i-%02i", id(homeassistant_time).now().day_of_month, id(homeassistant_time).now().month, id(homeassistant_time).now().year);


uart:
  id: tf_uart
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200

external_components:
# Note: this may not be needed if the pull request has been merged.
# Check https://github.com/esphome/esphome/pull/2956 for current status.
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h


binary_sensor:
  - platform: status
    name: "${friendly_name} status"

  - platform: gpio
    name: "${friendly_name} left button"
    pin:
      number: 14
      inverted: true
    icon: mdi:light-switch
    on_press:
      - lambda: 'id(disp1).send_command_printf("click screensaver,0");' # this wakes up the screen

  - platform: gpio
    name: "${friendly_name} right button"
    pin:
      number: 27
      inverted: true
    icon: mdi:light-switch
    on_press:
      - switch.toggle: relay_2
      - lambda: 'id(disp1).send_command_printf("click screensaver,0");'


####################################################################
# Nextion buttons #
####################################################################

##############
# Livingroom #
##############

  - platform: homeassistant
    id: light_staande_lamp_woonkamer
    internal: true
    entity_id: group.light_staande_lamp
    on_press:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light1.pic=%i", 23);'
    on_release:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light1.pic=%i", 22);'
  - platform: nextion
    name: "$friendly_name Staande lamp"
    page_id: 1
    component_id: 1

  - platform: homeassistant
    id: light_houten_lamp_woonkamer
    internal: true
    entity_id: light.houten_lamp_woonkamer
    on_press:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light2.pic=%i", 23);'
    on_release:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light2.pic=%i", 22);'
  - platform: nextion
    name: "$friendly_name Houten lamp"
    page_id: 1
    component_id: 3

  - platform: homeassistant
    id: light_staand_lampkapje
    internal: true
    entity_id: light.staand_lampkapje_woonkamer
    on_press:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light3.pic=%i", 23);'
    on_release:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light3.pic=%i", 22);'
  - platform: nextion
    name: "$friendly_name Staand lampkapje"
    page_id: 1
    component_id: 5

  - platform: homeassistant
    id: light_lamp_achter_tv
    internal: true
    entity_id: light.lamp_achter_tv
    on_press:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light4.pic=%i", 23);'
    on_release:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light4.pic=%i", 22);'
  - platform: nextion
    name: "$friendly_name Lamp achter TV"
    page_id: 1
    component_id: 6

  - platform: nextion
    name: "$friendly_name Plafondlamp zolder"
    page_id: 1
    component_id: 10
    on_press:
      then:
        - switch.toggle: relay_2


##############
# Media      #
##############
  - platform: nextion
    name: "$friendly_name Media - Play Chill Hits"
    page_id: 2
    component_id: 9

  - platform: nextion
    name: "$friendly_name Media - Play Rock Classics"
    page_id: 2
    component_id: 10

  - platform: nextion
    name: "$friendly_name Media - Play Rock Party"
    page_id: 2
    component_id: 11

  - platform: nextion
    name: "$friendly_name Media - Play Jazz"
    page_id: 2
    component_id: 12

  - platform: nextion
    name: "$friendly_name Media - Play/pause"
    page_id: 2
    component_id: 2

  - platform: nextion
    name: "$friendly_name Media - Volume down"
    page_id: 2
    component_id: 7

  - platform: nextion
    name: "$friendly_name Media - Volume up"
    page_id: 2
    component_id: 8


##############
# Thermostat #
##############
  - platform: nextion
    name: "$friendly_name Thermostat - CV setpoint min"
    page_id: 3
    component_id: 13

  - platform: nextion
    name: "$friendly_name Thermostat - CV setpoint plus"
    page_id: 3
    component_id: 12

  - platform: nextion
    name: "$friendly_name Thermostat - Airco setpoint min"
    page_id: 3
    component_id: 14

  - platform: nextion
    name: "$friendly_name Thermostat - Airco setpoint plus"
    page_id: 3
    component_id: 15

  - platform: nextion
    name: "$friendly_name Thermostat - Airco fan min"
    page_id: 3
    component_id: 18

  - platform: nextion
    name: "$friendly_name Thermostat - Airco fan plus"
    page_id: 3
    component_id: 19

  - platform: nextion
    name: "$friendly_name Thermostat - Airco fan swing toggle"
    page_id: 3
    component_id: 21


#################
# Light details #
#################
  - platform: nextion
    name: "$friendly_name Light details - Toggle"
    page_id: 10
    component_id: 1

  - platform: nextion
    name: "$friendly_name Light details - Xtra cold white"
    page_id: 10
    component_id: 18

  - platform: nextion
    name: "$friendly_name Light details - Cold white"
    page_id: 10
    component_id: 9

  - platform: nextion
    name: "$friendly_name Light details - Warm white"
    page_id: 10
    component_id: 8

  - platform: nextion
    name: "$friendly_name Light details - Xtra warm white"
    page_id: 10
    component_id: 19


output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21


button:
  # Button to restart ESPHome
  - platform: restart
    name: "$friendly_name restart"
    device_class: restart
    entity_category: config
  # Button to boot into safe mode
  - platform: safe_mode
    name: "$friendly_name restart (Safe Mode)"
    icon: mdi:restart-alert
    device_class: restart
    entity_category: config
  - platform: template
    name: $friendly_name TFT Upload
    device_class: update
    entity_category: config
    on_press:
      - lambda: 'id(disp1)->upload_tft();'


switch:
  - platform: gpio
    name: ${friendly_name} relay 1
    id: relay_1
    pin:
      number: 22
    icon: mdi:electric-switch

  - platform: gpio
    name: Plafondlamp zolder
    id: relay_2
    pin:
      number: 19
    icon: mdi:ceiling-light
    on_turn_on:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light8.pic=%i", 23);' # sets the correct picture (on/off) on the display
    on_turn_off:
      then:
        - wait_until:
            switch.is_on: nextion_init_slow
        - lambda: 'id(disp1).send_command_printf("livingroom.light8.pic=%i", 22);'

  - platform: gpio
    name: ${friendly_name} screen power
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
    icon: mdi:television

  # Basically a global variable to keep track on whether the Nextion display is ready or not. Delays initial info from HA to the display.
  - platform: template
    name: $name Nextion inited
    id: nextion_init
    internal: true
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true

  # Basically a global variable to keep track on whether the Nextion display is ready or not. Delays initial info from HA to the display, but with some extra delay
  - platform: template
    name: $name Nextion inited slow
    id: nextion_init_slow
    internal: true
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true

  # Show alarm screen on the display and disable the display usage (except for physical buttons).
  - platform: template
    name: $name Alarm screen
    id: alarm_activated
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true
    icon: mdi:alarm-light
    on_turn_on:
      - lambda: id(disp1).send_command_printf("page 8"); # this is the alarm page, must be updated when the page IDs change
    on_turn_off:
      - lambda: id(disp1).send_command_printf("page 0");

  # A template switch to keep track if Light details switch is on/off. This switch is controlled by an automation in Home Assistant
  - platform: template
    name: $name Light details toggle
    id: light_details_toggle
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: 'id(disp1).send_command_printf("lightdetails.light1.pic=%i", 23);'
    on_turn_off:
      - lambda: 'id(disp1).send_command_printf("lightdetails.light1.pic=%i", 22);'


rtttl:
  id: buzzer
  output: buzzer_out


sensor:
  # Uptime sensor https://esphome.io/components/sensor/uptime.html
  - platform: uptime
    name: $friendly_name uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: $friendly_name WiFi signal
    update_interval: 60s

  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: "${location} temperatuur"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 1

  # Current page displayed on the Nextion screen. This is received by custom code that runs on every page as Postinitialize Event
  - platform: nextion
    name: $name Current display page
    id: disp1_current_page
    component_name: "currentpage"

  # Grab current outdoor temperature from Home Assistant
  - platform: homeassistant
    id: outdoor_temperature
    entity_id: !secret nspanel_weather_id
    internal: true
    attribute: temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_text_printf("dashboard.temp_outdoor", "%.1f", id(outdoor_temperature).state);'

  # Grab current livingroom temperature from Home Assistant
  - platform: homeassistant
    id: livingroom_temperature
    entity_id: sensor.anna_temperature
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
      # https://www.codetable.net/hex/b0
        - lambda: 'id(disp1).set_component_text_printf("dashboard.temp_living", "%.1f", id(livingroom_temperature).state);'
        - lambda: 'id(disp1).set_component_text_printf("thermostat.temp_living", "%.1f", id(livingroom_temperature).state);'

  # Grab current CV livingroom setpoint from Home Assistant
  - platform: homeassistant
    id: cv_livingroom_setpoint
    entity_id: climate.anna
    attribute: temperature
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_text_printf("thermostat.setp_cv", "%.1f", id(cv_livingroom_setpoint).state);'

  # Grab current Airco livingroom setpoint from Home Assistant
  - platform: homeassistant
    id: airco_livingroom_setpoint
    entity_id: climate.airco_woonkamer
    attribute: temperature
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_text_printf("thermostat.setp_airco_liv", "%.1f", id(airco_livingroom_setpoint).state);'

  # This is a sensor that gets the current slider value from Nextion, so we can use that in an automation
  - platform: nextion
    name: Light details brightness slider sensor
    id: light_details_brightness_slider_sensor
    component_name: "lampbrightslider"
    accuracy_decimals: 0
    on_value:
      then:
        - number.set:
            id: light_details_brightness_slider
            value: !lambda |-
              return id(light_details_brightness_slider_sensor).state;

  # This is a sensor that gets the current red, green and blue color value from Nextion, so we can use that in an automation
  - platform: nextion
    name: Light details color sensor red
    id: light_details_color_sensor_red
    component_name: "lampcolorred"
    accuracy_decimals: 0
  - platform: nextion
    name: Light details color sensor green
    id: light_details_color_sensor_green
    component_name: "lampcolorgreen"
    accuracy_decimals: 0
  - platform: nextion
    name: Light details color sensor blue
    id: light_details_color_sensor_blue
    component_name: "lampcolorblue"
    accuracy_decimals: 0


number:
  # This is a slider that can be set from Home Assistant, to update the slider on the Nextion display. This is used inside an automation, to automatically show the correct brightness on the display
  - platform: template
    name: Light details brightness slider
    id: light_details_brightness_slider
    min_value: 0
    max_value: 255
    step: 1
    initial_value: 100
    optimistic: true # must be enabled, otherwise it won't store the new value
    set_action:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: 'id(disp1).set_component_value("lightdetails.bright_slider", x);'
        # - lambda: 'id(disp1).send_command_printf("click lightdetails.bright_slider,0");' # Enable this if you want to update the light_details_brightness_slider_sensor too. I don't need it because I only use that sensor for my automations


text_sensor:
  # Expose ESPHome version as sensor
  - platform: version
    name: $friendly_name ESPHome version
  # Expose WiFi information as sensors
  - platform: wifi_info
    ip_address:
      name: $friendly_name IP
      icon: mdi:ip-network
      id: ip_address
      on_value:
        then:
#          - wait_until:
#              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("connecting.ip_addr", "%s", id(ip_address).state.c_str());

    ssid:
      name: $friendly_name SSID
    bssid:
      name: $friendly_name BSSID
  # https://esphome.io/components/sensor/uptime.html
  - platform: template
    name: $friendly_name uptime human readable
    id: uptime_human
    icon: mdi:clock-start
    entity_category: diagnostic


  # Grab current Airco livingroom fan speed from Home Assistant, to show on the display
  - platform: homeassistant
    id: airco_livingroom_fan_speed
    entity_id: fan.airco_woonkamer
    attribute: speed
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("thermostat.airliv_fan_sp", "%s", id(airco_livingroom_fan_speed).state.c_str());

  # Grab current Airco livingroom fan swing from Home Assistant, to show on the display
  - platform: homeassistant
    id: airco_livingroom_fan_swing
    entity_id: switch.airco_woonkamer_leftright
    internal: true
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("thermostat.airliv_sw_togg", "%s", id(airco_livingroom_fan_swing).state.c_str());


  # Sun sensor from HA. Used to decide whether a sun or moon weather symbol should be used
  - platform: homeassistant
    id: sun_sun
    entity_id: sun.sun

  # Weather symbol, HA weather entity to pull data from
  - platform: homeassistant
    id: weather_symbol
    entity_id: !secret nspanel_weather_id
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            int symbol=5; // 5 is a empty box.
            if (id(weather_symbol).state == "clear-night") {
              symbol=6;
            } else if (id(weather_symbol).state == "cloudy") {
              symbol=7;
              if (id(sun_sun).state == "below_horizon") {
                symbol=8;
              }
            } else if (id(weather_symbol).state == "fog") {
              symbol=9;
            } else if (id(weather_symbol).state == "hail" || id(weather_symbol).state == "snowy-rainy") {
              symbol=10;
            } else if (id(weather_symbol).state == "lightning") {
              symbol=11;
            } else if (id(weather_symbol).state == "lightning-rainy" || id(weather_symbol).state == "exceptional") {
              symbol=12;
              if (id(sun_sun).state == "below_horizon") {
                symbol=13;
              }
            } else if (id(weather_symbol).state == "partlycloudy") {
              symbol=14;
              if (id(sun_sun).state == "below_horizon") {
                symbol=8;
              }
            } else if (id(weather_symbol).state == "pouring") {
              symbol=15;
            } else if (id(weather_symbol).state == "rainy") {
              symbol=16;
            } else if (id(weather_symbol).state == "snowy") {
              symbol=17;
            } else if (id(weather_symbol).state == "sunny") {
              symbol=18;
            } else if (id(weather_symbol).state == "windy" || id(weather_symbol).state == "windy-variant") {
              symbol=19;              
            }
            id(disp1).send_command_printf("dashboard.weather_symbol.pic=%i", symbol);


  # Last touched light on Nextion panel. To determine which light should be used inside the Home Assistant automation
  - platform: nextion
    name: $name light details ID
    id: nextion_light_details_id
    internal: false # must be available in front-end for automations
    component_name: touchedlight


# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: !secret nspanel_zolder_tft_url
    on_setup:
      then:
        - wait_until:
            api.connected
        - switch.template.publish:
            id: nextion_init
            state: on
        - delay: 10s
        - switch.template.publish:
            id: nextion_init_slow
            state: on
